name: Build
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
env:
  LATEST_PY_VERSION: '3.11'
  COVERAGE_ARGS: '--cov --cov-report=term --cov-report=xml'
  XDIST_ARGS: '--numprocesses=auto --dist=loadfile'
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Fix the 3.11 version due to this regression introduced in 3.11.5:
        #   https://github.com/python/cpython/issues/109538
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11.4']
    services:
      nginx:
        image: kennethreitz/httpbin
        ports:
          - 80:80
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1.3
        with:
          virtualenvs-in-project: true
          version: 1.5.1 # Poetry 1.6+ isn't compatible with python 3.7
      # Start integration test databases
      - uses: supercharge/mongodb-github-action@00aa70c6ee734b48256c4464aa3c5a065cbe8be6 # 1.3.0
        with:
          mongodb-version: 4.4
      - uses: supercharge/redis-github-action@2becaef66f8acb947674760ddcc70eb2bb24de2c # 1.4.0
        with:
          redis-version: '6'
      - uses: rrainn/dynamodb-action@10e634b7e381187d7f6d4df6d8907b6775815370 # v3.0.0
      # Cache packages per python version, and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@734d9cb93d6f7610c2400b0f789eaa6f9813e271 # v3
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all
      - name: Run custom test server
        run: |
          source $VENV
          cd test && gunicorn -D -c server/gunicorn-cfg.py server:app
      # Run tests with coverage report
      - name: Run tests
        run: |
          source $VENV
          pytest -rs test/unit ${{ env.XDIST_ARGS }} ${{ env.COVERAGE_ARGS }}
          pytest -rs test/integration --cov-append ${{ env.XDIST_ARGS }} ${{ env.COVERAGE_ARGS }}
      # Latest python version: send coverage report to codecov
      - name: "Upload coverage report to Codecov"
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b # v2
  # Run code analysis checks
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - name: Run style checks and linting via pre-commit hooks
        uses: pre-commit/action@646c83fcd040023954eafda54b4db0192ce70507 # v3.0.0
